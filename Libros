import csv
    
class Pila:
    """ Representa una pila con operaciones de apilar, desapilar y
        verificar si está vacía. """
 
    def __init__(self):
        """ Crea una pila vacía. """
        # La pila vacía se representa con una lista vacía
        self.items=[]

    def apilar(self, x):
        """ Agrega el elemento x a la pila. """
        # Apilar es agregar al final de la lista.
        self.items.append(x)

    def desapilar(self):
        """ Devuelve el elemento tope y lo elimina de la pila.
            Si la pila está vacía levanta una excepción. """
        try:
            return self.items.pop()
        except IndexError:
            raise ValueError("La pila está vacía")

    def es_vacia(self):
        """ Devuelve True si la lista está vacía, False si no. """
        return self.items == []
    
pilaCompleta = Pila()
pilaEncontrados = Pila()
pilaDescartados = Pila()

with open('libros.csv') as File:
    reader = csv.reader(File, delimiter=',', quotechar=',',
                        quoting=csv.QUOTE_MINIMAL)
    for row in reader:
        pilaCompleta.apilar(row)
        


print ("Bienvenido, como desea buscar el libro?: ")
print ("\t 1. Por nombre \n\t 2. Por categoria \n\t 3. Por Autor")
opcion = input ("Digite un numero: ")
if(opcion == 1):
    atributo = input ("Digite el nombre del libro")
    if(opcion == 2):
        atributo = input ("Digite la categoria del libro")
        if(opcion == 3):
            atributo = input ("Digite el autor del libro")
        else:
            print("Digite una opcion correcta")
            
while (pilaCompleta.es_vacia):
    if(atributo == pilaCompleta.desapilar()[0].split(";")[opcion-1]):
        print("")
